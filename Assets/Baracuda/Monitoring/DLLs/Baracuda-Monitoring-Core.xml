<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Baracuda-Monitoring-Core</name>
    </assembly>
    <members>
        <member name="T:Baracuda.Monitoring.IL2CPP.Enum8">
            <summary>
            Concrete 8 bit enum type definition used for IL2CPP AOT compilation.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IL2CPP.Enum16">
            <summary>
            Concrete 16 bit enum type definition used for IL2CPP AOT compilation.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IL2CPP.Enum32">
            <summary>
            Concrete 32 bit enum type definition used for IL2CPP AOT compilation.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IL2CPP.Enum64">
            <summary>
            Concrete 64 bit enum type definition used for IL2CPP AOT compilation.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions">
            <summary>
            Class is used to create type definitions for IL2CPP.<br/>
            Do not use call API of this class manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefStructTypeArray``1">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefArray``1">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefDictionary``2">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefEnumerable``1">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefList``2">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefList``1">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefField``2">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefProperty``2">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefEvent``2">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefMethod``1">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefMethod``2">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.TypeDefOutParameter``1">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IL2CPP.IL2CPPTypeDefinitions.DeclareThrow``1(``0)">
            <summary>
            Do not call this method manually!
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.Interfaces.IMonitoringTicker.ValidationTickEnabled">
            <summary>
            Toggle validation tick.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Interfaces.IValueProcessorFactory.CreateProcessorForType``1(Baracuda.Monitoring.IFormatData)">
            <summary>
            Creates a default type specific processor to format the value depending on its exact type.
            </summary>
            <typeparam name="TValue">The type of the value that should be parsed/formatted</typeparam>
            <returns></returns>
        </member>
        <member name="M:Baracuda.Monitoring.Interfaces.IValueProcessorFactory.FindCustomStaticProcessor``2(System.String,Baracuda.Monitoring.IFormatData)">
            <summary>
            This method will scan the declaring <see cref="T:System.Type"/> of the passed
            <see cref="T:Baracuda.Monitoring.Profiles.ValueProfile`2"/> for a valid processor method with the passed name.<br/>
            Certain types offer special functionality and require additional handling. Those types are:<br/>
            Types assignable from <see cref="T:System.Collections.Generic.IList`1"/> (inc. <see cref="T:System.Array"/>)<br/>
            Types assignable from <see cref="T:System.Collections.Generic.IDictionary`2"/><br/>
            Types assignable from <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="processor">name of the method declared as a value processor</param>
            <param name="formatData"></param>
            <typeparam name="TTarget">the <see cref="T:System.Type"/> of the profiles Target instance</typeparam>
            <typeparam name="TValue">the <see cref="T:System.Type"/> of the profiles value instance</typeparam>
            <returns></returns>
        </member>
        <member name="M:Baracuda.Monitoring.Interfaces.IValueProcessorFactory.FindCustomInstanceProcessor``2(System.String,Baracuda.Monitoring.IFormatData)">
            <summary>
            This method will scan the declaring <see cref="T:System.Type"/> of the passed
            <see cref="T:Baracuda.Monitoring.Profiles.ValueProfile`2"/> for a valid processor method with the passed name.<br/>
            Certain types offer special functionality and require additional handling. Those types are:<br/>
            Types assignable from <see cref="T:System.Collections.Generic.IList`1"/> (inc. <see cref="T:System.Array"/>)<br/>
            Types assignable from <see cref="T:System.Collections.Generic.IDictionary`2"/><br/>
            Types assignable from <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="processor">name of the method declared as a value processor</param>
            <param name="formatData"></param>
            <typeparam name="TTarget">the <see cref="T:System.Type"/> of the profiles Target instance</typeparam>
            <typeparam name="TValue">the <see cref="T:System.Type"/> of the profiles value instance</typeparam>
            <returns></returns>
        </member>
        <member name="M:Baracuda.Monitoring.Interfaces.IValueProcessorFactory.AddGlobalValueProcessor(System.Reflection.MethodInfo)">
            <summary>
            Add a global value processor.
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="M:Baracuda.Monitoring.Profiles.EventProfile`2.CreateUnit(System.Object)">
            <summary>
            Create a new <see cref="T:Baracuda.Monitoring.Units.EventUnit`2"/> based on this profile.
            </summary>
            <param name="target">Target object for the unit. Null if it is a static unit.</param>
        </member>
        <member name="M:Baracuda.Monitoring.Profiles.EventProfile`2.CreateMatchingDelegate(System.Action)">
            <summary>
            Returns a delegate with
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Baracuda.Monitoring.Profiles.FieldProfile`2">
            <typeparam name="TTarget">The <see cref="T:System.Type"/> of the fields target object</typeparam>
            <typeparam name="TValue">The <see cref="T:System.Type"/> of the return value of the field</typeparam>
        </member>
        <member name="M:Baracuda.Monitoring.Profiles.FieldProfile`2.CreateUnit(System.Object)">
            <summary>
            Create a new <see cref="T:Baracuda.Monitoring.Units.FieldUnit`2"/> based on this profile.
            </summary>
            <param name="target">Target object for the unit. Null if it is a static unit.</param>
        </member>
        <member name="M:Baracuda.Monitoring.Profiles.MonitorProfile.CreateUnit(System.Object)">
            <summary>
            Creates a <see cref="T:Baracuda.Monitoring.Units.MonitorUnit"/> with the <see cref="T:Baracuda.Monitoring.Profiles.MonitorProfile"/>.
            </summary>
            <param name="target">The target of the unit. Null if static</param>
            <returns></returns>
        </member>
        <member name="P:Baracuda.Monitoring.Profiles.NotifiableProfile`2.CustomUpdateEventAvailable">
            <summary>
            When true, the profile was provided with a custom update event and is not required to be evaluated every frame/tick.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Profiles.PropertyProfile`2">
            <typeparam name="TTarget">The Type of the properties target object</typeparam>
            <typeparam name="TValue">The Type of the properties return value</typeparam>
        </member>
        <member name="M:Baracuda.Monitoring.Profiles.PropertyProfile`2.CreateUnit(System.Object)">
            <summary>
            Create a new <see cref="T:Baracuda.Monitoring.Units.PropertyUnit`2"/> based on this profile.
            </summary>
            <param name="target">Target object for the unit. Null if it is a static unit.</param>
        </member>
        <member name="T:Baracuda.Monitoring.Systems.MonitoringProfiler">
            <summary>
            Class responsible for creating <see cref="T:Baracuda.Monitoring.Profiles.MonitorProfile"/>s for member found in custom assemblies that were
            flagged to be monitored by the use of a <see cref="T:Baracuda.Monitoring.MonitorAttribute"/>.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Systems.MonitoringSettings">
            <summary>
            Settings of the monitoring system.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.EnableMonitoring">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.AsyncProfiling">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.AutoInstantiateUI">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.UIController">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.OpenDisplayOnLoad">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.ShowRuntimeMonitoringObject">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.LogBadImageFormatException">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.LogOperationCanceledException">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.LogThreadAbortException">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.LogUnknownExceptions">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.LogProcessorNotFoundException">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.LogInvalidProcessorSignatureException">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterLabel">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterStaticOrInstance">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterType">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterDeclaringType">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterMemberType">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterTags">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterInterfaces">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterComparison">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterAppendSymbol">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterNegateSymbol">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterAbsoluteSymbol">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FilterTagsSymbol">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.AddClassName">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.AppendSymbol">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.HumanizeNames">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.VariablePrefixes">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.RichText">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.TrueColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.FalseColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.XColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.YColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.ZColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.WColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.MethodColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.SceneNameColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.TargetObjectColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.ClassColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.EventColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.OutParamColor">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.BannedAssemblyPrefixes">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.BannedAssemblyNames">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.ScriptFileIL2CPP">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.UseIPreprocessBuildWithReport">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.ThrowOnTypeGenerationError">
            <inheritdoc />
        </member>
        <member name="P:Baracuda.Monitoring.Systems.MonitoringSettings.PreprocessBuildCallbackOrder">
            <inheritdoc />
        </member>
        <member name="M:Baracuda.Monitoring.Systems.MonitoringSettings.FindOrCreateSettingsAsset">
            <summary>
            Get the settings asset or create a new instance of it.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Baracuda.Monitoring.Systems.ValueProcessorFactory">
            <summary>
            Class creates custom ValueProcessor delegates for Monitoring units based on their values type.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Systems.ValueProcessorFactory.CreateProcessorForType``1(Baracuda.Monitoring.IFormatData)">
            <summary>
            Creates a default type specific processor to format the value depending on its exact type.
            </summary>
            <typeparam name="TValue">The type of the value that should be parsed/formatted</typeparam>
            <returns></returns>
        </member>
        <member name="M:Baracuda.Monitoring.Systems.ValueProcessorFactory.FindCustomStaticProcessor``2(System.String,Baracuda.Monitoring.IFormatData)">
            <summary>
            This method will scan the declaring <see cref="T:System.Type"/> of the passed
            <see cref="T:Baracuda.Monitoring.Profiles.ValueProfile`2"/> for a valid processor method with the passed name.<br/>
            Certain types offer special functionality and require additional handling. Those types are:<br/>
            Types assignable from <see cref="T:System.Collections.Generic.IList`1"/> (inc. <see cref="T:System.Array"/>)<br/>
            Types assignable from <see cref="T:System.Collections.Generic.IDictionary`2"/><br/>
            Types assignable from <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="processor">name of the method declared as a value processor</param>
            <param name="formatData"></param>
            <typeparam name="TTarget">the <see cref="T:System.Type"/> of the profiles Target instance</typeparam>
            <typeparam name="TValue">the <see cref="T:System.Type"/> of the profiles value instance</typeparam>
            <returns></returns>
        </member>
        <member name="M:Baracuda.Monitoring.Systems.ValueProcessorFactory.FindCustomInstanceProcessor``2(System.String,Baracuda.Monitoring.IFormatData)">
            <summary>
            This method will scan the declaring <see cref="T:System.Type"/> of the passed
            <see cref="T:Baracuda.Monitoring.Profiles.ValueProfile`2"/> for a valid processor method with the passed name.<br/>
            Certain types offer special functionality and require additional handling. Those types are:<br/>
            Types assignable from <see cref="T:System.Collections.Generic.IList`1"/> (inc. <see cref="T:System.Array"/>)<br/>
            Types assignable from <see cref="T:System.Collections.Generic.IDictionary`2"/><br/>
            Types assignable from <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="processor">name of the method declared as a value processor</param>
            <param name="formatData"></param>
            <typeparam name="TTarget">the <see cref="T:System.Type"/> of the profiles Target instance</typeparam>
            <typeparam name="TValue">the <see cref="T:System.Type"/> of the profiles value instance</typeparam>
            <returns></returns>
        </member>
        <member name="M:Baracuda.Monitoring.Systems.ValueProcessorFactory.AddGlobalValueProcessor(System.Reflection.MethodInfo)">
            <summary>
            Add a global value processor.
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="M:Baracuda.Monitoring.Systems.ValueProcessorFactory.CreateIListFuncWithIndexArgument``2(System.Reflection.MethodInfo,System.String)">
            <summary>
            Creates a delegate that accepts an input of type <see cref="T:System.Collections.Generic.IList`1"/> and returns a string, using
            a custom value processor with a signature<br/>
            </summary>
            <param name="processor">the <see cref="T:System.Reflection.MethodInfo"/> of the previously validated processor</param>
            <param name="name">the name of the <see cref="T:Baracuda.Monitoring.Units.ValueUnit`2"/></param>
            <typeparam name="TInput">the exact argument/input type of the processors method. This type must be assignable from <see cref="T:System.Collections.Generic.IList`1"/></typeparam>
            <typeparam name="TElement">the element type of the IList</typeparam>
            <returns></returns>
        </member>
        <member name="M:Baracuda.Monitoring.Types.MonitoringExtensions.ConvertFast``2(``0)">
            <summary>
            Converts the target to be of the specified type.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Types.MonitoringExtensions.TryConvert``2(``0,``1@)">
            <summary>
            Try to convert the target to the specified type.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Types.MonitorProfileCtorArgs">
            <summary>
            Object acts as a wrapper for additional arguments that need to be passed when constructing a unit profile.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Types.OutParameterHandleRefStruct">
            <summary>
            Out parameter handle capable of handing readonly ref struct out parameters in IL2CPP Runtime.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Units.MonitorUnit">
            <summary>
            Object wrapping and handling the monitoring of a monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.Units.MonitorUnit.Name">
            <summary>
            Name of the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.Units.MonitorUnit.TargetName">
            <summary>
            Readable target object display name.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Units.MonitorUnit.GetState">
            <summary>
            Get the current value or state of the monitored member as a formatted string.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.Units.MonitorUnit.Target">
            <summary>
            The target object of the monitored member. Null if static
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.Units.MonitorUnit.Profile">
            <summary>
            The <see cref="T:Baracuda.Monitoring.Profiles.MonitorProfile"/> of the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.Units.MonitorUnit.UniqueID">
            <summary>
            Unique UniqueID
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.Units.MonitorUnit.Enabled">
            <summary>
            The active state of the unit. Only active units are updated / evaluated.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Units.MonitorUnit.Refresh">
            <summary>
            Force the unit to update its state. This will invoke a <see cref="E:Baracuda.Monitoring.Units.MonitorUnit.ValueUpdated"/> event.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.Units.MonitorUnit.ValueUpdated">
            <summary>
            Event is invoked when the value of the unit has changed.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.Units.MonitorUnit.Disposing">
            <summary>
            Event is invoked when the unit is being disposed.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.Units.MonitorUnit.ActiveStateChanged">
            <summary>
            Event is invoked when the units active state has changed.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Units.ValueUnit`2">
            <summary>
            Base type for units that monitor a value <br/>
            <see cref="T:Baracuda.Monitoring.Units.FieldUnit`2"/><br/>
            <see cref="T:Baracuda.Monitoring.Units.PropertyUnit`2"/>
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Baracuda.Monitoring.Utilities.Extensions.TypeExtensions.IsAccessible(System.Type)">
            <summary>
            Returns ture if the type and all of its declaring types are public.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Utilities.Pooling.ConcurrentCollectionPool`2.Get">
            <summary>
            This operation is thread safe!
            Get an object from the pool. Must be manually released back to the pool by calling Release.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Utilities.Pooling.ConcurrentCollectionPool`2.Release(`0)">
            <summary>
            This operation is thread safe!
            Release an object to the pool. opti in a thread safe manner.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Utilities.Pooling.ConcurrentStringBuilderPool">
            <summary>
            Thread safe version of a <see cref="T:Baracuda.Monitoring.Utilities.Pooling.StringBuilderPool"/>
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Utilities.Reflection.AssemblyProfiler.GetFilteredAssemblies(System.String[],System.String[])">
            <summary>
            Method will initialize and filter all available assemblies only leaving custom assemblies.
            Precompiled unity and system assemblies as well as some other known assemblies will be excluded by default.
            </summary>
            <param name="excludeNames">Custom array of names of assemblies that should be excluded from the result</param>
            <param name="excludePrefixes">Custom array of prefixes for names of assemblies that should be excluded from the result</param>
        </member>
        <member name="T:Baracuda.Monitoring.Utilities.Reflection.DisableAssemblyReflectionAttribute">
            <summary>
            Disable reflection for the target assembly or class.
            </summary>
        </member>
    </members>
</doc>
