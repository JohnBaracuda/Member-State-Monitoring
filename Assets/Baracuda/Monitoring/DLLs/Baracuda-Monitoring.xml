<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Baracuda-Monitoring</name>
    </assembly>
    <members>
        <member name="T:Baracuda.Monitoring.DisableMonitoringAttribute">
            <summary>
            Disable monitoring for the target assembly or class.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.EventDisplay">
            <summary>
            Event display options.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.EventDisplay.None">
            <summary>
            Empty value.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.EventDisplay.SubCount">
            <summary>
            Display the subscriber count of the event.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.EventDisplay.InvokeCount">
            <summary>
            Display how many times the event was called.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.EventDisplay.TrueCount">
            <summary>
            Show the actual subscriber count.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.EventDisplay.SubInfo">
            <summary>
            Display a list of subscriber.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.EventDisplay.Signature">
            <summary>
            Display the events signature.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.GlobalValueProcessor">
            <summary>
            Mark a method as a Global Value Processor.
            Please ensure that a methods marked as a global value processor accept an IFormatData as their first argument,
            the type you want to process as a second argument and return a string!<br/>
            Target method must be static and should be pure, meaning that calling them should not affect
            state outside of their inputs and outputs.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.GlobalValueProcessor.#ctor">
            <summary>
            Mark a method as a Global Value Processor.
            Please ensure that a methods marked as a global value processor accept an IFormatData as their first argument,
            the type you want to process as a second argument and return a string!<br/>
            Target method must be static and should be pure, meaning that calling them should not affect
            state outside of their inputs and outputs.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MAttributeCollection">
            <summary>
            Inherit from this attribute to use it as a proxy to create custom attributes that wrap multiple monitoring attributes.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MBackgroundColorAttribute">
            <summary>
            Determine the background color for the displayed value.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MBackgroundColorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Determine the background color for the displayed value.
            </summary>
            <param name="r">Red channel value</param>
            <param name="g">Green channel value</param>
            <param name="b">Blue channel value</param>
            <param name="a">Alpha channel value</param>
        </member>
        <member name="M:Baracuda.Monitoring.MBackgroundColorAttribute.#ctor(Baracuda.Monitoring.ColorPreset)">
            <summary>
            Determine the background color for the displayed value.
            </summary>
            <param name="colorPreset">Chose a preset of predefined color values</param>
        </member>
        <member name="M:Baracuda.Monitoring.MBackgroundColorAttribute.#ctor(System.String)">
            <summary>
            Determine the background color for the displayed value.
            </summary>
            <param name="colorValueHex">Set the color via hexadecimal value</param>
        </member>
        <member name="T:Baracuda.Monitoring.MColorAttribute">
            <summary>
            Base type for attributes to set custom color values.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MColorAttribute.ColorValue">
            <summary>
            Parsed color based on passed primitive values.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MColorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Base type for attributes to set custom color values.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MColorAttribute.#ctor(Baracuda.Monitoring.ColorPreset)">
            <summary>
            Base type for attributes to set custom color values.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MColorAttribute.#ctor(System.String)">
            <summary>
            Base type for attributes to set custom color values.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.ColorPreset">
            <summary>
            Enum contains some easily accessible color presets.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Transparent">
            <summary> 100% Transparent </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Black">
            <summary> 100% Black </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.White">
            <summary> 100% White </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Gray">
            <summary> 50% Gray </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.TransparentBlack">
            <summary> 50% Transparent Black </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Red">
            <summary> Red Color </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Green">
            <summary> Green Color </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Blue">
            <summary> Blue Color </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Yellow">
            <summary> Yellow Color </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Cyan">
            <summary> Cyan Color </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Magenta">
            <summary> Magenta Color </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Orange">
            <summary> Orange Color </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.Lime">
            <summary> Lime Color </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ColorPreset.LightBlue">
            <summary> LightBlue Color </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MElementIndentAttribute">
            <summary>
            The elementIndent of individual elements of a displayed collection.
            This property will only have an effect on collections.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MElementIndentAttribute.ElementIndent">
            <summary>
            The elementIndent of individual elements of a displayed collection.
            This property will only have an effect on collections.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MElementIndentAttribute.#ctor(System.Int32)">
            <summary>
            The elementIndent of individual elements of a displayed collection.
            This property will only have an effect on collections.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MFontNameAttribute">
            <summary>
            Pass the name of a custom font style that will be used fot the target member.
            FontName assets must be registered to the UI Controller.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MFontNameAttribute.FontName">
            <summary>
            Name of the font.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MFontNameAttribute.FontHash">
            <summary>
            Hash of the name of the font.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MFontNameAttribute.#ctor(System.String)">
            <summary>
            Pass the name of a custom font style that will be used fot the target member.
            FontName assets must be registered to the UI Controller.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MFontSizeAttribute">
            <summary>
            Set the fontsize for the UI.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MFontSizeAttribute.FontSize">
            <summary>
            Set the fontsize for the UI.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MFontSizeAttribute.#ctor(System.Int32)">
            <summary>
            Set the fontsize for the UI.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MFormatAttribute">
            <summary>
            Custom format string used to display the members value if possible.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MFormatAttribute.Format">
            <summary>
            Custom format string used to display the members value if possible.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MFormatAttribute.#ctor(System.String)">
            <summary>
            Custom format string used to display the members value if possible.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MGroupColorAttribute">
            <summary>
            Determine the background color for the group of the displayed value.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MGroupColorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Determine the background color for the group of the displayed value.
            </summary>
            <param name="r">Red channel value</param>
            <param name="g">Green channel value</param>
            <param name="b">Blue channel value</param>
            <param name="a">Alpha channel value</param>
        </member>
        <member name="M:Baracuda.Monitoring.MGroupColorAttribute.#ctor(Baracuda.Monitoring.ColorPreset)">
            <summary>
            Determine the background color for the group of the displayed value.
            </summary>
            <param name="colorPreset">Chose a preset of predefined color values</param>
        </member>
        <member name="M:Baracuda.Monitoring.MGroupColorAttribute.#ctor(System.String)">
            <summary>
            Determine the background color for the group of the displayed value.
            </summary>
            <param name="colorValueHex">Set the color via hexadecimal value</param>
        </member>
        <member name="T:Baracuda.Monitoring.MGroupElementAttribute">
            <summary>
            Whether or not the unit should be wrapped in an object or type group.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MGroupElementAttribute.GroupElement">
            <summary>
            Whether or not the unit should be wrapped in an object or type group.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MGroupElementAttribute.#ctor(System.Boolean)">
            <summary>
            Whether or not the unit should be wrapped in an object or type group.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MGroupNameAttribute">
            <summary>
            Manually set the group for the element.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MGroupNameAttribute.GroupName">
            <summary>
            Manually set the group for the element.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MGroupNameAttribute.#ctor(System.String)">
            <summary>
            Manually set the group for the element.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MGroupOrderAttribute">
            <summary>
            Set a elements order for its UI group.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MGroupOrderAttribute.Order">
            <summary>
            Signed order value.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MGroupOrderAttribute.#ctor(System.Int32)">
            <summary>
            Set a elements order for its UI group.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MLabelAttribute">
            <summary>
            Custom label for the member.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MLabelAttribute.Label">
            <summary>
            Custom label for the member.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MLabelAttribute.#ctor(System.String)">
            <summary>
            Custom label for the member.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitorAttribute">
            <summary>
            Mark a Field, Property or Event to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered.
            This process can be simplified by using monitored base types:
            <br/><see cref="T:Baracuda.Monitoring.MonitoredObject"/>, <see cref="T:Baracuda.Monitoring.MonitoredBehaviour"/> or <see cref="T:Baracuda.Monitoring.MonitoredSingleton`1"/>
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitorEventAttribute">
            <summary>
            Mark a C# event to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            when they are created and destroyed using:
            This process can be simplified by using monitored base types:
            <br/><see cref="T:Baracuda.Monitoring.MonitoredObject"/>, <see cref="T:Baracuda.Monitoring.MonitoredBehaviour"/> or <see cref="T:Baracuda.Monitoring.MonitoredSingleton`1"/>
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitorEventAttribute.ShowSubscriberCount">
            <summary>
            When enabled, the subscriber count of the event handler delegate is displayed.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitorEventAttribute.ShowInvokeCounter">
            <summary>
            When enabled, the amount the monitored event has been invoked will be displayed.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitorEventAttribute.ShowTrueCount">
            <summary>
            When enabled, the actual subscriber count of the event handler is displayed including internal monitoring listener.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitorEventAttribute.ShowSubscriberInfo">
            <summary>
            When enabled, every subscribed delegate will be displayed.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitorEventAttribute.ShowSignature">
            <summary>
            When enabled, display the signature of the event.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitorEventAttribute.#ctor">
            <summary>
            Mark a C# event to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            when they are created and destroyed using:
            This process can be simplified by using monitored base types:
            <br/><see cref="T:Baracuda.Monitoring.MonitoredObject"/>, <see cref="T:Baracuda.Monitoring.MonitoredBehaviour"/> or <see cref="T:Baracuda.Monitoring.MonitoredSingleton`1"/>
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitorEventAttribute.#ctor(Baracuda.Monitoring.EventDisplay)">
            <summary>
            Mark a C# event to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            when they are created and destroyed using:
            This process can be simplified by using monitored base types:
            <br/><see cref="T:Baracuda.Monitoring.MonitoredObject"/>, <see cref="T:Baracuda.Monitoring.MonitoredBehaviour"/> or <see cref="T:Baracuda.Monitoring.MonitoredSingleton`1"/>
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitorFieldAttribute">
            <summary>
            Mark a Field to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitorFieldAttribute.#ctor">
            <summary>
            Mark a Field to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitoringMetaAttribute">
            <summary>
            Attributes inheriting from this class can be used to provide monitoring units with additional meta data.
            These attributes will be cached on the Monitoring Profile and can be queried with <see cref="M:Baracuda.Monitoring.IMonitorProfile.TryGetMetaAttribute``1(``0@)"/>.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitorMethodAttribute">
            <summary>
            Mark a Method to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitorMethodAttribute.Args">
            <summary>
            Array contains values that will be used as a args for monitored methods.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitorMethodAttribute.#ctor">
            <summary>
            Mark a Method to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitorMethodAttribute.#ctor(System.Object[])">
            <summary>
            Mark a Method to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitorMethodAttribute.#ctor(System.Object)">
            <summary>
            Mark a Method to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitorMethodAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Mark a Method to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitorMethodAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Mark a Method to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitorPropertyAttribute">
            <summary>
            Mark a Property to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitorPropertyAttribute.#ctor">
            <summary>
            Mark a Property to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitorValueAttribute">
            <summary>
            Mark a Field or Property to be monitored at runtime.
            When monitoring non static members, instances of the monitored class must be registered and unregistered
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitorValueAttribute.EnableSetAccess">
            <summary>
            When enabled, the monitored value may be set by the MonitorUnit. This will enable UI scripts to set the value
            directly.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MOptionsAttribute">
            <summary>
            Attribute contains multiple settings.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.Format">
            <summary>
            Custom format string used to display the members value if possible.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.Label">
            <summary>
            Custom label for the member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.FontSize">
            <summary>
            Set the fontsize for the UI.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.FontName">
            <summary>
            Pass the name of a custom font style that will be used for the target member.
            FontName assets must be registered to the UI Controller.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.GroupName">
            <summary>
            Set the group for the element.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.GroupElement">
            <summary>
            Whether or not the unit should be wrapped in an object or type group.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.ShowIndexer">
            <summary>
            If the member is a collection, determine if the index of individual elements should be displayed or not.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.ElementIndent">
            <summary>
            The indent of individual elements of a displayed collection.
            This property will only have an effect on collections.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.Position">
            <summary>
            The preferred position of an individual UIElement on the canvas.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.TextAlign">
            <summary>
            Horizontal Text Align
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.Order">
            <summary>
            Relative vertical order of the displayed element.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.GroupOrder">
            <summary>
            Relative vertical order of the displayed element.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.RichText">
            <summary>
            Override local RichText settings.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.TextColor">
            <summary>
            Determine the text color for the displayed value.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.BackgroundColor">
            <summary>
            Determine the background color for the displayed value.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.GroupColor">
            <summary>
            Determine the background color for the group of the displayed value.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.Tags">
            <summary>
            Set optional tags for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.ValueProcessor">
            <summary>
            Set a method as a custom value processor for a monitored member.
            The method must return a string and accept the value of the monitored member.
            </summary>
            <footer>Note: use the nameof keyword to pass the name of the method.</footer>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.UpdateEvent">
            <summary>
            The name of an event that is invoked when the monitored value is updated. Use to reduce the evaluation of the
            monitored member. Events can be of type <see cref="T:System.Action"/> or <see cref="T:System.Action`1"/>, with T being the type of the monitored value.
            </summary>
            <footer>Note: use the nameof keyword to pass the name of the method.</footer>
        </member>
        <member name="P:Baracuda.Monitoring.MOptionsAttribute.Enabled">
            <summary>
            Set the default enabled state for the monitored member.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MOptionsAttribute.#ctor(System.String)">
            <summary>
            Attribute contains multiple settings.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MOptionsAttribute.#ctor(Baracuda.Monitoring.UIPosition)">
            <summary>
            Attribute contains multiple settings.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MOptionsAttribute.#ctor(System.String[])">
            <summary>
            Attribute contains multiple settings.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MOptionsAttribute.#ctor">
            <summary>
            Attribute contains multiple settings.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.UIPosition">
            <summary>
            UI position enum.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.UIPosition.UpperLeft">
            <summary> Monitored member is displayed at the upper left </summary>
        </member>
        <member name="F:Baracuda.Monitoring.UIPosition.UpperRight">
            <summary> Monitored member is displayed at the upper right </summary>
        </member>
        <member name="F:Baracuda.Monitoring.UIPosition.LowerLeft">
            <summary> Monitored member is displayed at the lower left </summary>
        </member>
        <member name="F:Baracuda.Monitoring.UIPosition.LowerRight">
            <summary> Monitored member is displayed at the lower right </summary>
        </member>
        <member name="T:Baracuda.Monitoring.HorizontalTextAlign">
            <summary>
            Horizontal text align
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.HorizontalTextAlign.Left">
            <summary> Align left </summary>
        </member>
        <member name="F:Baracuda.Monitoring.HorizontalTextAlign.Center">
            <summary> Align centered </summary>
        </member>
        <member name="F:Baracuda.Monitoring.HorizontalTextAlign.Right">
            <summary> Align right </summary>
        </member>
        <member name="T:Baracuda.Monitoring.EnumExtensions">
            <summary>
            Contains string extensions for enums.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.EnumExtensions.AsString(Baracuda.Monitoring.UIPosition)">
            <summary>
            Better ToString method.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MOrderAttribute">
            <summary>
            Set a elements order in its UI group.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MOrderAttribute.Order">
            <summary>
            Signed order value.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MOrderAttribute.#ctor(System.Int32)">
            <summary>
            Set a elements order in its UI group.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MPositionAttribute">
            <summary>
            The preferred position of an individual UIElement on the canvas.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MPositionAttribute.Position">
            <summary>
            The preferred position of an individual UIElement on the canvas.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MPositionAttribute.#ctor(Baracuda.Monitoring.UIPosition)">
            <summary>
            The preferred position of an individual UIElement on the canvas.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MRichTextAttribute">
            <summary>
            Use to override local RichText settings.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MRichTextAttribute.RichTextEnabled">
            <summary>
            Used to override local RichText enabled settings.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MRichTextAttribute.#ctor(System.Boolean)">
            <summary>
            Use to override local RichText settings.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MShowIfAttribute">
            <summary>
            The monitored member will only be displayed if the given value of the passed member returns true.<br/>
            Methods can accept the members current value as a parameter and use custom logic based on the members current
            state to determine if the member should be displayed or not.<br/>
            Passed events must be of type <see cref="T:System.Action`1"/> (boolean) and will trigger the member to be displayed based
            on the passed bool value.
            Please remember that adding conditions will add additional overhead.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MShowIfAttribute.MemberName">
            <summary>
            Name of the member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MShowIfAttribute.RequiredResult">
            <summary>
            Required conditional value.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MShowIfAttribute.Condition">
            <summary>
            Condition type.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MShowIfAttribute.Comparison">
            <summary>
            Comparison method.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MShowIfAttribute.Other">
            <summary>
            Other value boxed in an object.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MShowIfAttribute.ValidationMethod">
            <summary>
            Validation method type.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MShowIfAttribute.#ctor(Baracuda.Monitoring.Condition)">
            <summary>
            The monitored member will only be displayed if the given condition is true.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MShowIfAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            The monitored member will only be displayed if the given value of the passed member returns true.<br/>
            Methods can accept the members current value as a parameter and use custom logic based on the members current
            state to determine if the member should be displayed or not.<br/>
            Passed events must be of type <see cref="T:System.Action`1"/> (boolean) and will trigger the member to be displayed based
            on the passed bool value.
            Please remember that adding conditions will add additional overhead.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MShowIfAttribute.#ctor(Baracuda.Monitoring.Comparison,System.Object)">
            <summary>
            The monitored member will only be displayed if the given comparison to the passed object is true.
            Please remember that adding conditions will add additional overhead.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.ValidationMethod">
            <summary>
            Validation method type.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ValidationMethod.ByMember">
            <summary>
            Value is validated via the result of an external member.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ValidationMethod.Comparison">
            <summary>
            Value is validated via a comparison to another constant value that is passed set via attribute.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.ValidationMethod.Condition">
            <summary>
            Value is validated via special condition. (e.g: collection not empty)
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Comparison">
            <summary>
            Comparison type.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Comparison.Equals">
            <summary>
            Show if the current value and the passed 'other' value are equal.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Comparison.EqualsNot">
            <summary>
            Show if the current value and the passed 'other' value are not equal.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Comparison.Greater">
            <summary>
            Show if the current value is a number that is greater than the passed 'other' value.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Comparison.GreaterOrEqual">
            <summary>
            Show if the current value is a number that is greater or equal to the passed 'other' value.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Comparison.Lesser">
            <summary>
            Show if the current value is a number that is lesser than the passed 'other' value.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Comparison.LesserOrEqual">
            <summary>
            Show if the current value is a number that is lesser or equal to the passed 'other' value.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Condition">
            <summary>
            Condition type.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.False">
            <summary>
            Show if the value is false.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.True">
            <summary>
            Show if the value is true.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.Null">
            <summary>
            Show if the value is null.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.NotNull">
            <summary>
            Show if the value not null.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.NotZero">
            <summary>
            Show if the value is a number and not zero (0).
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.Zero">
            <summary>
            Show if the value is a number and zero (0).
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.Negative">
            <summary>
            Show if the value is a negative number.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.Positive">
            <summary>
            Show if the value is a positive number.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.NotNullOrEmptyString">
            <summary>
            Show if the value is a string that is not null or empty.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.NotNullOrWhiteSpace">
            <summary>
            Show if the value is a string that is not null or white space.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.Condition.CollectionNotEmpty">
            <summary>
            Show if the value is a collection that is not null and contains at least 1 item.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MShowIndexerAttribute">
            <summary>
            If the member is a collection, determine if the index of individual elements should be displayed or not.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MShowIndexerAttribute.ShowIndexer">
            <summary>
            If the member is a collection, determine if the index of individual elements should be displayed or not.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MShowIndexerAttribute.#ctor(System.Boolean)">
            <summary>
            If the member is a collection, determine if the index of individual elements should be displayed or not.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MTagAttribute">
            <summary>
            Add tags to a monitored unit that can be used to provide additional meta data and filtering options for UI.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MTagAttribute.Tags">
            <summary>
            Collection of passed tags.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MTagAttribute.#ctor(System.String)">
            <summary>
            Add tags to a monitored unit that can be used to provide additional meta data and filtering options for UI.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MTagAttribute.#ctor(System.String,System.String)">
            <summary>
            Add tags to a monitored unit that can be used to provide additional meta data and filtering options for UI.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MTagAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Add tags to a monitored unit that can be used to provide additional meta data and filtering options for UI.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MTagAttribute.#ctor(System.String[])">
            <summary>
            Add tags to a monitored unit that can be used to provide additional meta data and filtering options for UI.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MTextAlignAttribute">
            <summary>
            Horizontal Text Align
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MTextAlignAttribute.TextAlign">
            <summary>
            Horizontal Text Align
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MTextAlignAttribute.#ctor(Baracuda.Monitoring.HorizontalTextAlign)">
            <summary>
            Horizontal Text Align
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MTextColorAttribute">
            <summary>
            Determine the text color for the displayed value.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MTextColorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Determine the text color for the displayed value.
            </summary>
            <param name="r">Red channel value</param>
            <param name="g">Green channel value</param>
            <param name="b">Blue channel value</param>
            <param name="a">Alpha channel value</param>
        </member>
        <member name="M:Baracuda.Monitoring.MTextColorAttribute.#ctor(Baracuda.Monitoring.ColorPreset)">
            <summary>
            Determine the text color for the displayed value.
            </summary>
            <param name="colorPreset">Chose a preset of predefined color values</param>
        </member>
        <member name="M:Baracuda.Monitoring.MTextColorAttribute.#ctor(System.String)">
            <summary>
            Determine the text color for the displayed value.
            </summary>
            <param name="colorValueHex">Set the color via hexadecimal value</param>
        </member>
        <member name="T:Baracuda.Monitoring.MUpdateEventAttribute">
            <summary>
            Pass the name of an event that is invoked when the monitored value is updated. Use to reduce the evaluation of the
            monitored member. Events can be of type <see cref="T:System.Action"/> or <see cref="T:System.Action`1"/>, with T being the type of the monitored value.
            </summary>
            <footer>Note: use the nameof keyword to pass the name of the event.</footer>
        </member>
        <member name="P:Baracuda.Monitoring.MUpdateEventAttribute.UpdateEvent">
            <summary>
            The name of an event that is invoked when the monitored value is updated. Use to reduce the evaluation of the
            monitored member. Events can be of type <see cref="T:System.Action"/> or <see cref="T:System.Action`1"/>, with T being the type of the monitored value.
            </summary>
            <footer>Note: use the nameof keyword to pass the name of the event.</footer>
        </member>
        <member name="M:Baracuda.Monitoring.MUpdateEventAttribute.#ctor(System.String)">
            <summary>
            Pass the name of an event that is invoked when the monitored value is updated. Use to reduce the evaluation of the
            monitored member. Events can be of type <see cref="T:System.Action"/> or <see cref="T:System.Action`1"/>, with T being the type of the monitored value.
            </summary>
            <footer>Note: use the nameof keyword to pass the name of the event.</footer>
        </member>
        <member name="T:Baracuda.Monitoring.MValueProcessorAttribute">
            <summary>
            Set a method as a custom value processor for a monitored member.
            The method must return a string and accept the value of the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MValueProcessorAttribute.Processor">
            <summary>
            Set a method as a custom value processor for a monitored member.
            The method must return a string and accept the value of the monitored member.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MValueProcessorAttribute.#ctor(System.String)">
            <summary>
            Set a method as a custom value processor for a monitored member.
            The method must return a string and accept the value of the monitored member.
            </summary>
            <param name="processorMethod">The name of the method you want to use as a value processor.</param>
            <footer>Note: use the nameof keyword to pass the name of the method.</footer>
        </member>
        <member name="T:Baracuda.Monitoring.MVisibleAttribute">
            <summary>
            Set the default visible state for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MVisibleAttribute.Visible">
            <summary>
            Set the default visible state for the monitored member.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Set the default visible state for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.IsInitialized">
            <summary>
            Value indicated whether or not monitoring profiling has completed and monitoring is fully initialized.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="E:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.ProfilingCompleted">
            <summary>
            Event is invoked when profiling process for the current system has been completed.
            Subscribing to this event will instantly invoke a callback if profiling has already completed.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.UnitCreated">
            <summary>
            Event is called when a new <see cref="!:MonitorUnit"/> was created.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.UnitDisposed">
            <summary>
            Event is called when a <see cref="!:MonitorUnit"/> was disposed.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.RegisterTarget``1(``0)">
            <summary>
            Register an object that is monitored during runtime.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.UnregisterTarget``1(``0)">
            <summary>
            Unregister an object that is monitored during runtime.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.GetStaticUnits">
            <summary>
            Get a list of monitoring units for static targets.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.GetInstanceUnits">
            <summary>
            Get a list of monitoring units for instance targets.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.GetAllMonitoringUnits">
            <summary>
            Get a list of all monitoring units.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.Show">
            <summary>
            Set the active monitoring display visible.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.Hide">
            <summary>
            Hide the active monitoring display.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.ToggleDisplay">
            <summary>
            Toggle the visibility of the active monitoring display.
            This method returns a value indicating the new visibility state.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.VisibleStateChanged">
            <summary>
            Event is invoked when the monitoring UI became visible/invisible
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.IsVisible">
            <summary>
            Returns true if the there is an active monitoring display that is also visible.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.GetActiveUIController">
            <summary>
            Get the current <see cref="T:Baracuda.Monitoring.MonitoringUIController"/>
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.GetActiveUIController``1">
            <summary>
            Get the current <see cref="T:Baracuda.Monitoring.MonitoringUIController"/> as a concrete implementation of T.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.CreateMonitoringUI">
            <summary>
            Create a MonitoringUIController instance if there is none already. Disable 'Auto Instantiate UI' in the
            Monitoring Settings and use this method for more control over the timing in which the MonitoringUIController
            is instantiated.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.ApplyFilter(System.String)">
            <summary>
            ApplyFilter displayed units by their name, tags etc.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.ResetFilter">
            <summary>
            Reset active filter.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.IsFontHashUsed(System.Int32)">
            <summary>
            Method returns true if the passed hash from the name of a font asset is used by a MFontNameAttribute and therefore
            required by a monitoring unit. Used to dynamically load/unload required fonts.
            </summary>
            <param name="fontHash">The hash of the fonts name (string)</param>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.GetMonitorUnitsForTarget(System.Object)">
            <summary>
            Get a list of <see cref="T:Baracuda.Monitoring.IMonitorUnit"/>s registered to the passed target object.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Dummy.MonitoringSystemDummy.GetAllTags">
            <summary>
            Get a list of all custom tags, applied by [MTag] attributes that can be used for filtering.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IFormatData">
            <summary>
            Interface grants access to various formatting options for a monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.Format">
            <summary>
            The format string for the member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.ShowIndexer">
            <summary>
            When enabled, the index of the elements of a monitored collection are displayed.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.Label">
            <summary>
            The label for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.FontSize">
            <summary>
            The font size for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.FontName">
            <summary>
            The font name for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.FontHash">
            <summary>
            The hash code of the font for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.Position">
            <summary>
            The UI position for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.TextAlign">
            <summary>
            The horizontal align for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.AllowGrouping">
            <summary>
            Allow UI grouping for the monitored members display.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.Group">
            <summary>
            The UI group for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.ElementIndent">
            <summary>
            The element indent for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.RichTextEnabled">
            <summary>
            The RichText enabled settings for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.Order">
            <summary>
            The order for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.GroupOrder">
            <summary>
            The group order for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.TextColor">
            <summary>
            The text color for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.BackgroundColor">
            <summary>
            The background color for the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IFormatData.GroupColor">
            <summary>
            The group color for the monitored member.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IGettableValue`1">
            <summary>
            Interface to get the value of a monitored field, property or method.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Baracuda.Monitoring.IGettableValue`1.GetValue">
            <summary>
            Get the value of a monitored field, property or method.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IGettableValue">
            <summary>
            Interface to get the value of a monitored field, property or method.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IGettableValue.GetValueAs``1">
            <summary>
            Get the value of a monitored field, property or method.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IGettableValue.GetValueAsObject">
            <summary>
            Get the value of a monitored field, property or method.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.ProfilingCompletedListener">
            <summary>
            Delegate for profiling completed listener
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IMonitoringManager">
            <summary>
            Core interface for accessing Runtime Monitoring functionality.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringManager.IsInitialized">
            <summary>
            Value indicated whether or not monitoring profiling has completed and monitoring is fully initialized.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="E:Baracuda.Monitoring.IMonitoringManager.ProfilingCompleted">
            <summary>
            Event is invoked when profiling process for the current system has been completed.
            Subscribing to this event will instantly invoke a callback if profiling has already completed.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.IMonitoringManager.UnitCreated">
            <summary>
            Event is called when a new <see cref="T:Baracuda.Monitoring.IMonitorUnit"/> was created.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.IMonitoringManager.UnitDisposed">
            <summary>
            Event is called when a <see cref="T:Baracuda.Monitoring.IMonitorUnit"/> was disposed.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringManager.RegisterTarget``1(``0)">
            <summary>
            Register an object that is monitored during runtime.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringManager.UnregisterTarget``1(``0)">
            <summary>
            Unregister an object that is monitored during runtime.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringManager.GetStaticUnits">
            <summary>
            Get a list of monitoring units for static targets.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringManager.GetInstanceUnits">
            <summary>
            Get a list of monitoring units for instance targets.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringManager.GetAllMonitoringUnits">
            <summary>
            Get a list of all monitoring units.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IMonitoringSettings">
            <summary>
            Interface to access settings of for the monitoring system.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.EnableMonitoring">
            <summary>
            When enabled, the monitoring system is active, otherwise dummy systems are in place to prevent API calls from
            resulting in compile or runtime exceptions.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.AutoInstantiateUI">
            <summary>
            When enabled, monitoring UI is instantiated as soon as profiling has completed.
            Otherwise MonitoringUI.CreateMonitoringUI() must be called manually.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.AsyncProfiling">
            <summary>
            When enabled, initial profiling will be processed asynchronous on a background thread. (Disabled for WebGL)
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.OpenDisplayOnLoad">
            <summary>
            When enabled, the monitoring display will be opened as soon as profiling has completed.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.ShowRuntimeMonitoringObject">
            <summary>
            When enabled, the monitoring runtime object is set visible in the hierarchy.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.LogBadImageFormatException">
            <summary>
            BadImageFormatException is a rare exception that may occur during profiling.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.LogOperationCanceledException">
            <summary>
            OperationCanceledException is an exception that may occur when exiting playmode during profiling.
            It is used to abort the profiling background Task.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.LogThreadAbortException">
            <summary>
            ThreadAbortException may occur if the thread, the profiling is running on is aborted for rare reasons.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.LogUnknownExceptions">
            <summary>
            Set the logging level of every unknown exception that may occur during profiling.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.LogProcessorNotFoundException">
            <summary>
            ProcessorNotFoundException may occur if the passed method name of a ValueProcessor cannot be found.
            This exception might occur after refactoring.
            For this reason usage of the nameof keyword is recommended when passing the name of a method.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.LogInvalidProcessorSignatureException">
            <summary>
            InvalidProcessorSignatureException may occur if a method was passed as a custom ValueProcessor with an invalid signature.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.AddClassName">
            <summary>
            When enabled, class names will be used as a prefix for displayed units
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.AppendSymbol">
            <summary>
            This symbol will be used to separate units class names and their member names.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.HumanizeNames">
            <summary>
            When enabled, names of monitored members will be humanized.(e.g. _playerHealth => Player Health).
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.VariablePrefixes">
            <summary>
            Collection of variable prefixes that should be removed when humanizing monitored member names.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.RichText">
            <summary>
            Enable the use of RichText on a global level.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.TrueColor">
            <summary>
            Color to display the true value of a boolean.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FalseColor">
            <summary>
            Color to display the false value of a boolean.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.XColor">
            <summary>
            Color to display the true X value of a Vector or Quaternion.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.YColor">
            <summary>
            Color to display the true Y value of a Vector or Quaternion.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.ZColor">
            <summary>
            Color to display the true Z value of a Vector or Quaternion.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.WColor">
            <summary>
            Color to display the true W value of a Vector or Quaternion.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.ClassColor">
            <summary>
            Color to display the name of a class.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.EventColor">
            <summary>
            Color to display the name of an event.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.SceneNameColor">
            <summary>
            Color to display the name of a scene.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.TargetObjectColor">
            <summary>
            Color to display the name of target GameObject.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.MethodColor">
            <summary>
            Color to display the name of a method.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.OutParamColor">
            <summary>
            Color to display the out parameter of a method.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.BannedAssemblyPrefixes">
            <summary>
            Assemblies with matching prefixes are ignored when creating a monitoring profile during initialization.
            Note that Unity, System and other core assemblies will always be ignored.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.BannedAssemblyNames">
            <summary>
            Assemblies with matching names are ignored when creating a monitoring profile during initialization.
            Note that Unity, System and other core assemblies will always be ignored.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.ScriptFileIL2CPP">
            <summary>
            Reference to the .cs file that will be used to automatically create types for IL2CPP AOT generation, needed in IL2CPP runtime.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.UseIPreprocessBuildWithReport">
            <summary>
            When enabled, this object will listen to an IPreprocessBuildWithReport callback
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.ThrowOnTypeGenerationError">
            <summary>
            When enabled, an exception is thrown if a type cannot be generated by code generation for any reason. This will cancel active build processes.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.PreprocessBuildCallbackOrder">
            <summary>
            The IPreprocessBuildWithReport.callbackOrder of the AOT generation object.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.UIController">
            <summary>
            Reference to the used MonitoringDisplay object.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterLabel">
            <summary>
            When enabled, label are used for filtering.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterStaticOrInstance">
            <summary>
            When enabled, static and instance can be used for filtering.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterType">
            <summary>
            When enabled, the type name can be used for filtering. (e.g. int, float, string, etc.)
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterDeclaringType">
            <summary>
            When enabled, the members declaring type name can be used for filtering. (e.g. Player, MonoBehaviour etc.)
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterMemberType">
            <summary>
            When enabled, the member type can be used for filtering. (e.g. Field, Property, etc.)
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterTags">
            <summary>
            When enabled, custom tags can be used for filtering.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterInterfaces">
            <summary>
            When enabled, you can use the filter 'Interface' to only display monitored interfaces.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterComparison">
            <summary>
            Set the string comparison used for filtering. Absolute filtering is always case sensitive!
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterAppendSymbol">
            <summary>
            Symbol can be used to combine multiple filters.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterNegateSymbol">
            <summary>
            Symbol can be used to negate a filter.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterAbsoluteSymbol">
            <summary>
            Symbol can be used for absolute filtering, meaning that it is only searching for exact member names.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitoringSettings.FilterTagsSymbol">
            <summary>
            Symbol can be used to tag filtering, meaning that it is only searching for custom tags.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IMonitoringSubsystem`1">
            <summary>
            Base interface for monitoring systems.
            </summary>
            <typeparam name="T">concrete interface for system</typeparam>
        </member>
        <member name="T:Baracuda.Monitoring.IMonitoringUI">
            <summary>
            Access monitoring UI methods of the currently active UI instance.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUI.Show">
            <summary>
            Set the active monitoring display visible.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUI.Hide">
            <summary>
            Hide the active monitoring display.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUI.ToggleDisplay">
            <summary>
            Toggle the visibility of the active monitoring display.
            This method returns a value indicating the new visibility state.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.IMonitoringUI.VisibleStateChanged">
            <summary>
            Event is invoked when the monitoring UI became visible/invisible
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUI.IsVisible">
            <summary>
            Returns true if the there is an active monitoring display that is also visible.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUI.GetActiveUIController">
            <summary>
            Get the current <see cref="T:Baracuda.Monitoring.MonitoringUIController"/>
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUI.GetActiveUIController``1">
            <summary>
            Get the current <see cref="T:Baracuda.Monitoring.MonitoringUIController"/> as a concrete implementation of T.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUI.CreateMonitoringUI">
            <summary>
            Create a MonitoringUIController instance if there is none already. Disable 'Auto Instantiate UI' in the
            Monitoring Settings and use this method for more control over the timing in which the MonitoringUIController
            is instantiated.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUI.ApplyFilter(System.String)">
            <summary>
            ApplyFilter displayed units by their name, tags etc.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUI.ResetFilter">
            <summary>
            Reset active filter.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IMonitoringUtility">
            <summary>
            Access to various monitoring utility methods.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUtility.IsFontHashUsed(System.Int32)">
            <summary>
            Method returns true if the passed hash from the name of a font asset is used by a MFontNameAttribute and therefore
            required by a monitoring unit. Used to dynamically load/unload required fonts.
            </summary>
            <param name="fontHash">The hash of the fonts name (string)</param>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUtility.GetMonitorUnitsForTarget(System.Object)">
            <summary>
            Get a list of <see cref="T:Baracuda.Monitoring.IMonitorUnit"/>s registered to the passed target object.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUtility.GetAllTags">
            <summary>
            Get a list of all custom tags, applied by [MTag] attributes that can be used for filtering.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitoringUtility.GetAllTypeStrings">
            <summary>
            Get a list of all monitored types for custom filtering.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IMonitorProfile">
            <summary>
            Interface provides access to data describing the profile of a monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.Attribute">
            <summary>
            Instance of the attribute that is used to flag the target member to be monitored.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.MemberInfo">
            <summary>
            Member info of the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.MemberType">
            <summary>
            The type of the member (either field, property or event)
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.ReceiveTick">
            <summary>
            True if the unit receives a custom tick event.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.DefaultEnabled">
            <summary>
            Get the default enabled state of the unit.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.DeclaringType">
            <summary>
            The target or declaring type of the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.MonitoredMemberType">
            <summary>
            The type of the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.IsStatic">
            <summary>
            Indicates if monitored member is static or not.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.FormatData">
            <summary>
            Object contains information about label, fontsize and more ui / display related data.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.Tags">
            <summary>
            String array that contains additional meta data and filtering options for UI.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorProfile.CustomTags">
            <summary>
            String array that only contains custom tags applied with the tag attribute.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitorProfile.GetMetaAttribute``1">
            <summary>
            The monitoring profiler caches every additional attribute that inherits from MonitoringMetaAttribute on
            the profile. You can access these custom attributes during runtime using this method without the need of
            reflection code.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitorProfile.TryGetMetaAttribute``1(``0@)">
            <summary>
            Try to get a MonitoringMetaAttribute.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.IMonitorUnit">
            <summary>
            Access internal handler of a monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorUnit.Name">
            <summary>
            Name of the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorUnit.TargetName">
            <summary>
            Readable target object display name.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorUnit.Target">
            <summary>
            The target object of the monitored member. Null if static.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorUnit.Profile">
            <summary>
            <see cref="T:Baracuda.Monitoring.IMonitorProfile"/> describing the monitored member.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorUnit.Enabled">
            <summary>
            The active state of the unit. Only enabled units are updated and displayed.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.IMonitorUnit.UniqueID">
            <summary>
            Unique Id
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.IMonitorUnit.ActiveStateChanged">
            <summary>
            Event is invoked when the units active state has changed.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.IMonitorUnit.ValueUpdated">
            <summary>
            Event is invoked when the value of the monitored member has changed.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.IMonitorUnit.Disposing">
            <summary>
            Event is invoked when the unit is being disposed.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitorUnit.Refresh">
            <summary>
            Force the monitored member to update its state.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.IMonitorUnit.GetState">
            <summary>
            Get the current value or state of the monitored member as a formatted string.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.ISettableValue`1">
            <summary>
            Interface is not yet in use.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.ISettableValue`1.SetValue(`0)">
            <summary>
            Interface is not yet in use.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.ISettableValue">
            <summary>
            Interface is not yet in use.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.ISettableValue.SetValue(System.Object)">
            <summary>
            Interface is not yet in use.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.ISettableValue.SetValueStruct``1(``0)">
            <summary>
            Interface is not yet in use.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Modules.ConsoleMonitor">
            <summary>
            Custom class showcasing how the monitoring system can be used to create a simple console log display.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Modules.ConsoleMonitor.Clear">
            <summary>
            Clear the console display and cache.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Modules.ConsoleMonitor.Awake">
            <inheritdoc />
        </member>
        <member name="T:Baracuda.Monitoring.Modules.FPSMonitor">
            <summary>
            Custom class showcasing how the monitoring system can be used to create a simple FPS display.
            </summary>
        </member>
        <member name="E:Baracuda.Monitoring.Modules.FPSMonitor.FPSUpdated">
            <summary>
            Event is invoked evey time the FPS display is updated.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Modules.MonitorModuleBase">
            <summary>
            Base type for some automatically monitored MonoBehaviours
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.Modules.MonitorModuleBase.Awake">
            <summary>
            Awake method.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.Modules.SystemMonitor">
            <summary>
            Custom class showcasing how the monitoring system can be used to create a simple system monitor display.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitoringSystems">
            <summary>
                Class manages references for individual monitoring systems.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitoringSystems.MonitoringManager">
            <summary>
            Core interface for accessing Runtime Monitoring functionality.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitoringSystems.MonitoringSettings">
            <summary>
            Interface to access settings of for the monitoring system.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitoringSystems.MonitoringUtility">
            <summary>
            Access to various monitoring utility methods.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonitoringSystems.MonitoringUI">
            <summary>
            Access monitoring UI methods of the currently active UI instance.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoringSystems.Resolve``1">
            <summary>
            Get the current system registered to the interface.
            </summary>
            <typeparam name="T">Type of the interface</typeparam>
            <returns></returns>
            <exception cref="T:Baracuda.Monitoring.MonitoringSystems.SystemNotRegisteredException">Exception will occur if you are trying to access a system that is not registered.</exception>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoringSystems.Register``1(``0)">
            <summary>
            Register a monitoring system. This API should only be called by the monitoring system itself.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitoringSystems.SystemNotRegisteredException">
            <summary>
            Exception will occur if you are trying to access a system that is not registered.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitoringUIController">
            <summary>
            Base class for monitoring ui controller.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoringUIController.IsVisible">
            <summary>
            Return true if the UI is active and false if it is not active.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoringUIController.ShowMonitoringUI">
            <summary>
            Activate / show the ui.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoringUIController.HideMonitoringUI">
            <summary>
            Deactivate / hide the ui.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoringUIController.OnUnitCreated(Baracuda.Monitoring.IMonitorUnit)">
            <summary>
            Use to add UI elements for the passed unit.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoringUIController.OnUnitDisposed(Baracuda.Monitoring.IMonitorUnit)">
            <summary>
            Use to remove UI elements for the passed unit.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitoredBehaviour">
            <summary>
            Base class for monitored MonoBehaviours.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoredBehaviour.Awake">
            <summary>
            Ensure to call base.Awake when overriding this method.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoredBehaviour.OnDestroy">
            <summary>
            Ensure to call base.OnDestroy when overriding this method.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitoredObject">
            <summary>
            Base class for monitored objects.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoredObject.#ctor">
            <summary>
            Base class for monitored objects.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoredObject.Dispose">
            <summary>
            Ensure to call base.Dispose when overriding this method.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitoredScriptableObject">
            <summary>
            Base class for monitored ScriptableObjects.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoredScriptableObject.OnEnable">
            <summary>
            Ensure to call base.OnEnable when overriding this method.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoredScriptableObject.OnDisable">
            <summary>
            Ensure to call base.OnDisable when overriding this method.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitoredSingleton`1">
            <inheritdoc />
        </member>
        <member name="M:Baracuda.Monitoring.MonitoredSingleton`1.Awake">
            <inheritdoc />
        </member>
        <member name="M:Baracuda.Monitoring.MonitoredSingleton`1.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:Baracuda.Monitoring.MonoSingleton`1">
            <summary>
            Abstract class for making scene persistent MonoBehaviour singletons.
            </summary>
        </member>
        <member name="P:Baracuda.Monitoring.MonoSingleton`1.Current">
            <summary>
            Get the current instance of T
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonoSingleton`1.Promise">
            <summary>
            Calling <see cref="M:Baracuda.Monitoring.MonoSingleton`1.Promise"/> will guarantee to return an instance.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonoSingleton`1.TryGetCurrent(`0@)">
            <summary>
            Try get the current instance of T
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Baracuda.Monitoring.MonoSingleton`1.Awake">
            <summary>
            Ensure to call base.Awake when overriding this method.
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonoSingleton`1.OnDestroy">
            <summary>
            Ensure to call base.OnDestroy when overriding this method.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.LoggingLevel">
            <summary>
            Level of logging applied to certain error / exception types.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.LoggingLevel.None">
            <summary>
            Exceptions will be ignored.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.LoggingLevel.Message">
            <summary>
            Exceptions will be logged as a message.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.LoggingLevel.Warning">
            <summary>
            Exceptions will be logged as a warning.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.LoggingLevel.Error">
            <summary>
            Exceptions will be logged as an error message.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.LoggingLevel.Exception">
            <summary>
            Exceptions will be thrown.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MemberType">
            <summary>
            Enum contains all member types that can be monitored.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MemberType.Field">
            <summary>
            The monitored member is a Field.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MemberType.Property">
            <summary>
            The monitored member is a Property.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MemberType.Event">
            <summary>
            The monitored member is an Event.
            </summary>
        </member>
        <member name="F:Baracuda.Monitoring.MemberType.Method">
            <summary>
            The monitored member is a Method.
            </summary>
        </member>
        <member name="T:Baracuda.Monitoring.MonitoringExtensions">
            <summary>
            Contains monitoring extensions
            </summary>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoringExtensions.RegisterMonitor``1(``0)">
            <summary>
            Register an object that is monitored during runtime.
            </summary>
            <param name="target"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Baracuda.Monitoring.MonitoringExtensions.UnregisterMonitor``1(``0)">
            <summary>
            Unregister an object that is monitored during runtime.
            </summary>
            <param name="target"></param>
            <typeparam name="T"></typeparam>
        </member>
    </members>
</doc>
